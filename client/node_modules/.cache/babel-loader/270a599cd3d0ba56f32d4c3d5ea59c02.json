{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oreox\\\\dev\\\\github\\\\react-Portfolio\\\\client\\\\src\\\\pages\\\\Projects\\\\Projects.js\",\n    _s = $RefreshSig$();\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport API from \"../../Utils/API/API\";\nimport Container from \"react-bootstrap/Container\";\nimport { useState, useEffect } from \"react\";\nimport CardColumns from \"react-bootstrap/CardColumns\";\nimport RepoCard from \"../../components/Card/RepoCard.js\";\nimport TopCard from \"../../components/Card/TopCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Projects() {\n  _s();\n\n  const [state, setState] = useState({\n    repos: []\n  });\n  useEffect(() => {\n    const remoteApiPromise = API.getRepos();\n    remoteApiPromise.then(items => {\n      const transfromedData = items.data;\n      setState(prevState => ({ ...prevState,\n        repos: transfromedData\n      }));\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: \"true\",\n    children: [/*#__PURE__*/_jsxDEV(TopCard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CardColumns, {\n      children: state.repos.map(item => /*#__PURE__*/_jsxDEV(RepoCard, {\n        Name: item.name,\n        Description: item.description,\n        url: item.html_url\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Projects, \"CE0XT5Yjb4nM+7raQ9F6Im8RoHY=\");\n\n_c = Projects;\nexport default Projects;\n\nvar _c;\n\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"sources":["C:/Users/oreox/dev/github/react-Portfolio/client/src/pages/Projects/Projects.js"],"names":["API","Container","useState","useEffect","CardColumns","RepoCard","TopCard","Projects","state","setState","repos","remoteApiPromise","getRepos","then","items","transfromedData","data","prevState","map","item","name","description","html_url","id"],"mappings":";;;AAAA,OAAO,sCAAP;AACA,OAAOA,GAAP,MAAgB,qBAAhB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAQC,WAAR,MAA0B,6BAA1B;AACA,OAAOC,QAAP,MAAqB,mCAArB;AACA,OAAOC,OAAP,MAAoB,+BAApB;;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAClB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC;AAAEQ,IAAAA,KAAK,EAAE;AAAT,GAAD,CAAlC;AACAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,gBAAgB,GAAGX,GAAG,CAACY,QAAJ,EAAzB;AACAD,IAAAA,gBAAgB,CAACE,IAAjB,CAAuBC,KAAD,IAAW;AAE/B,YAAMC,eAAe,GAAGD,KAAK,CAACE,IAA9B;AAEAP,MAAAA,QAAQ,CAAEQ,SAAD,KAAgB,EACvB,GAAGA,SADoB;AAEvBP,QAAAA,KAAK,EAAEK;AAFgB,OAAhB,CAAD,CAAR;AAID,KARD;AASD,GAXQ,EAWN,EAXM,CAAT;AAaA,sBACE,QAAC,SAAD;AAAW,IAAA,KAAK,EAAC,MAAjB;AAAA,4BACI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEE,QAAC,WAAD;AAAA,gBACGP,KAAK,CAACE,KAAN,CAAYQ,GAAZ,CAAiBC,IAAD,iBACf,QAAC,QAAD;AACE,QAAA,IAAI,EAAEA,IAAI,CAACC,IADb;AAEE,QAAA,WAAW,EAAED,IAAI,CAACE,WAFpB;AAGE,QAAA,GAAG,EAAEF,IAAI,CAACG;AAHZ,SAAeH,IAAI,CAACI,EAApB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GA7BQhB,Q;;KAAAA,Q;AA8BT,eAAeA,QAAf","sourcesContent":["import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport API from \"../../Utils/API/API\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { useState, useEffect } from \"react\";\r\nimport  CardColumns  from \"react-bootstrap/CardColumns\";\r\nimport RepoCard from \"../../components/Card/RepoCard.js\";\r\nimport TopCard from \"../../components/Card/TopCard\";\r\n\r\nfunction Projects() {\r\n  const [state, setState] = useState({ repos: [] });\r\n  useEffect(() => {\r\n    const remoteApiPromise = API.getRepos();\r\n    remoteApiPromise.then((items) => {\r\n\r\n      const transfromedData = items.data;\r\n    \r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        repos: transfromedData,\r\n      }));\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Container fluid='true'>\r\n        <TopCard/>\r\n      <CardColumns>\r\n        {state.repos.map((item) => (\r\n          <RepoCard key={item.id}\r\n            Name={item.name}\r\n            Description={item.description}\r\n            url={item.html_url}\r\n          ></RepoCard>\r\n        ))}\r\n      </CardColumns>\r\n    </Container>\r\n  );\r\n}\r\nexport default Projects;\r\n"]},"metadata":{},"sourceType":"module"}